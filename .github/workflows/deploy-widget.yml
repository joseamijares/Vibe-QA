name: Deploy Widget

on:
  push:
    branches:
      - main
    paths:
      - 'src/widget/**'
      - 'vite.widget.config.ts'
      - 'scripts/deploy-widget-supabase.sh'
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'src/widget/**'
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build-widget:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build widget
        run: npm run build:widget

      - name: Calculate widget metrics
        id: metrics
        run: |
          FILESIZE=$(wc -c < dist-widget/widget.js)
          GZIPSIZE=$(gzip -c dist-widget/widget.js | wc -c)
          echo "filesize=$FILESIZE" >> $GITHUB_OUTPUT
          echo "gzipsize=$GZIPSIZE" >> $GITHUB_OUTPUT
          
          echo "### Widget Build Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- File size: $(numfmt --to=iec-i --suffix=B $FILESIZE)" >> $GITHUB_STEP_SUMMARY
          echo "- Gzip size: $(numfmt --to=iec-i --suffix=B $GZIPSIZE)" >> $GITHUB_STEP_SUMMARY

      - name: Check widget size limits
        run: |
          MAX_SIZE=500000  # 500KB limit
          FILESIZE=${{ steps.metrics.outputs.filesize }}
          
          if [ $FILESIZE -gt $MAX_SIZE ]; then
            echo "‚ùå Widget size exceeds limit ($FILESIZE > $MAX_SIZE bytes)" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Upload widget artifact
        uses: actions/upload-artifact@v4
        with:
          name: widget-build
          path: dist-widget/
          retention-days: 30

  test-widget:
    needs: build-widget
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download widget artifact
        uses: actions/download-artifact@v4
        with:
          name: widget-build
          path: dist-widget/

      - name: Run widget tests
        run: |
          # Add your widget-specific tests here
          echo "Running widget integration tests..."
          
          # Check widget initialization
          if ! grep -q "window.VibeQA" dist-widget/widget.js; then
            echo "Error: Widget doesn't expose VibeQA global"
            exit 1
          fi
          
          # Validate shadow DOM setup
          if ! grep -q "attachShadow" dist-widget/widget.js; then
            echo "Error: Widget doesn't use Shadow DOM"
            exit 1
          fi

  deploy-preview:
    needs: test-widget
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build widget
        run: npm run build:widget

      - name: Post PR comment with preview info
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### üöÄ Widget Build Complete!\n\nThe widget has been built successfully. It will be deployed to production when this PR is merged to main.`
            });

  deploy-production:
    needs: test-widget
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'release') ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy to production
        env:
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          npm run deploy:widget
          
          VERSION=$(node -p "require('./package.json').version")
          
          echo "### Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "Version: v${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "Widget URLs:" >> $GITHUB_STEP_SUMMARY
          echo "- Latest: https://${SUPABASE_PROJECT_ID}.supabase.co/storage/v1/object/public/widget-assets/production/widget.js" >> $GITHUB_STEP_SUMMARY
          echo "- Versioned: https://${SUPABASE_PROJECT_ID}.supabase.co/storage/v1/object/public/widget-assets/v${VERSION}/widget.js" >> $GITHUB_STEP_SUMMARY

      - name: Create release notes
        if: github.event_name == 'release'
        run: |
          echo "### Widget Release Notes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${{ github.event.release.body }}" >> $GITHUB_STEP_SUMMARY

  rollback:
    if: failure()
    needs: [deploy-production]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Rollback to previous version
        env:
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo "‚ö†Ô∏è Rolling back widget deployment..."
          
          # Get the previous version from git tags
          PREVIOUS_VERSION=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "v0.0.0")
          echo "Rolling back to version: $PREVIOUS_VERSION"
          
          # Download the previous version from versioned path
          STORAGE_URL="https://$SUPABASE_PROJECT_ID.supabase.co/storage/v1"
          PREVIOUS_WIDGET_URL="$STORAGE_URL/object/public/widget-assets/$PREVIOUS_VERSION/widget.js"
          
          # Check if previous version exists
          if curl -f -s -o /tmp/previous-widget.js "$PREVIOUS_WIDGET_URL"; then
            echo "Previous version found, restoring..."
            
            # Upload the previous version as the current production version
            curl -X POST \
              "$STORAGE_URL/object/widget-assets/production/widget.js" \
              -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
              -H "Content-Type: application/javascript" \
              -H "Cache-Control: public, max-age=300" \
              --data-binary "@/tmp/previous-widget.js"
            
            echo "‚úÖ Rollback complete to version $PREVIOUS_VERSION"
          else
            echo "‚ùå Previous version not found in storage. Manual intervention required."
            exit 1
          fi