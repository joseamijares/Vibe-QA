name: Supabase Database Migrations

on:
  push:
    branches:
      - main
    paths:
      - 'supabase/migrations/*.sql'
  pull_request:
    paths:
      - 'supabase/migrations/*.sql'
  workflow_dispatch:

env:
  SUPABASE_VERSION: 1.142.2

jobs:
  validate-migrations:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: ${{ env.SUPABASE_VERSION }}

      - name: Validate SQL syntax
        run: |
          echo "Validating SQL migration files..."
          for file in supabase/migrations/*.sql; do
            if [ -f "$file" ]; then
              echo "Checking $file"
              # Basic SQL syntax validation
              if ! grep -q ";" "$file"; then
                echo "Warning: $file might be missing semicolons"
              fi
              # Check for common issues
              if grep -qi "drop table\|drop database\|drop schema" "$file"; then
                echo "Warning: $file contains destructive operations"
              fi
            fi
          done

      - name: Check migration naming convention
        run: |
          for file in supabase/migrations/*.sql; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              if ! [[ "$filename" =~ ^[0-9]{3}_.*\.sql$ ]] && ! [[ "$filename" =~ ^[0-9]{8}_.*\.sql$ ]]; then
                echo "Error: $filename doesn't follow naming convention (NNN_description.sql or YYYYMMDD_description.sql)"
                exit 1
              fi
            fi
          done

  deploy-production:
    needs: validate-migrations
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: ${{ env.SUPABASE_VERSION }}

      - name: Setup PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Backup production database
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          BACKUP_NAME="pre-migration-$(date +%Y%m%d-%H%M%S)"
          echo "Creating backup: $BACKUP_NAME"
          
          # Create a database dump using pg_dump
          # Note: This requires DATABASE_URL to be set
          if [ -n "$DATABASE_URL" ]; then
            echo "Creating database backup..."
            
            # Create backup directory
            mkdir -p backups
            
            # Create the backup
            pg_dump "$DATABASE_URL" --no-owner --no-privileges --clean > "backups/${BACKUP_NAME}.sql"
            
            # Compress the backup
            gzip "backups/${BACKUP_NAME}.sql"
            
            # Upload to artifacts for retention
            echo "backup_file=backups/${BACKUP_NAME}.sql.gz" >> $GITHUB_OUTPUT
            
            echo "✅ Backup created: ${BACKUP_NAME}.sql.gz" >> $GITHUB_STEP_SUMMARY
            echo "Size: $(ls -lh backups/${BACKUP_NAME}.sql.gz | awk '{print $5}')" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ DATABASE_URL not set, skipping backup" >> $GITHUB_STEP_SUMMARY
            echo "Note: For production deployments, always set DATABASE_URL for backups" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload backup artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: database-backup-${{ github.run_id }}
          path: backups/*.sql.gz
          retention-days: 7

      - name: Deploy migrations to production
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          supabase link --project-ref $SUPABASE_PROJECT_ID
          supabase db push --password $SUPABASE_DB_PASSWORD

      - name: Verify deployment
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        run: |
          echo "### Production Migration Complete" >> $GITHUB_STEP_SUMMARY
          echo "Timestamp: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY